{
  
    
        "post0": {
            "title": "欢迎使用（Jupyter）",
            "content": "&#20320;&#22909; . print(&quot;你好！欢迎使用！&quot;) . 你好！欢迎使用！ .",
            "url": "/myblog/jupyter/%E4%B8%AD%E6%96%87/%E6%AC%A2%E8%BF%8E/2020/04/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8-Jupyter.html",
            "relUrl": "/jupyter/%E4%B8%AD%E6%96%87/%E6%AC%A2%E8%BF%8E/2020/04/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8-Jupyter.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "为梁森山新书写的序",
            "content": "给梁森山新书写的序：创客教育何以持续十年 . 2017年，我应邀参加第三届中国教育创新成果公益博览会活动。我校报送的教学成果《“课程、空间、活动”三位一体的创客教育实践》获得了SERVE大奖。按照组委会要求，我需要在领奖仪式上做一分钟的演讲。如果从2008年建立科技制作社开始算起，我的创客教育已经持续了九年。用一分钟来归纳九年的工作，难度自然很大。转念一想，组委会实际上是要求我，用最简洁的话来回答三个问题： . 1.为什么做创客教育？ . 2.创客教育做得怎么样了？ . 3.接下来准备怎么做创客教育？ . 经过一周时间的反复思考，我写下了如下一段话： . 当我决定温州中学创客空间要向全校开放的时候，并没有意识到自己已经打开了一扇新的教育大门。几年后，总有老师、校长、专家问我，创客教育该怎么做。今天我来到这里，想告诉所有的关注创客教育的教育者，创客教育不是仅仅建一个高大上的创客空间，也不是仅仅带学生去获几个国家大奖，申报几个发明专利，而是应该从课程、空间和活动，多个维度去实施。没有课程，我们的学生不知道如何“造物”；没有空间，我们的学生没有地方“造物”；没有活动，如何让更多的孩子爱上“造物”？感谢教博会给我机会，给温州中学机会，给中国创客教育机会。 . 估计很少有人用这样的话来作为教学成果的领奖感言。但我清楚地知道，这段话能够很好地表达我的初心。2015年国内创客教育爆发，我最担心的莫过于全国各地兴起大建创客空间的风气，然后投入多的学校就成为了当地实施创客教育的典范。我还担心有些教育管理部门，用获奖次数和等级作为重要标准来评价学校的创客教育实施情况。这些做法对还处于萌芽阶段的创客教育来说是有害无益的，不仅会伤害了一批踏踏实实做创客教育的学校，还会将创客教育导向形式主义。 . 我在台上演讲的时候，老梁（我们对梁森山老师的称呼）就在现场。他是来参加我校负责的特别节目——一个以“展望创客教育十年”为主题的沙龙活动。严格说，他和吴俊杰、傅骞、丁书林等老师，是专门来为我鼓掌的。这颇让我感动。在那段颇为困难的时期，我们彼此之间都有了那种抱团取暖、相互依赖的特殊感情。 . 创客教育的实施，需要“课程、空间、活动”三位一体。这已经成为我们这批教育创客们的共识。“课程、空间、活动”其实还是评价创客教育的几个重要维度。对有钱的学校来说，建一个创客空间或许很容易，但同时还要开设课程，组织创客活动就不容易做到了，这要真刀真枪地干起来。同样，那些以科创竞赛获奖而出名的学校，我们也可以用这样的评价指标，引导他们除了参加竞赛，还要开设普惠的课程，要建设能够向所有学生开放的创客空间。 . 为了有效引领国内的创客教育，老梁在幕后做了很多努力。在我们的圈子内部，往往用“扫地僧”来称呼他。2015年，他花了很多精力编写了一本《中国创客教育蓝皮书（基础教育版）》，记录创客教育发展史上的一些故事，成为研究中国创客教育的必读书籍。他还通过各种人脉，帮我们这些早期教育创客建立一个组织，就是大家熟悉的中国电子学会现代教育技术分会创客教育专委会（现在更名为中国电子学会现代教育技术分会创客教育专家组），每年一次的STEAM教育大会从此有了国家级的主办方。申报教育部教育装备研究与发展中心的课题，也是在2015年做的一项重要工作。他申报的课题名称为《校园创客活动与创客空间建设案例研究》，我应邀参与，并作为这个课题组的核心成员开展研究工作。 . 经过四年的努力，我们回头看看，这个课题已经完成了当时的既定目标：了解当前校园创客空间建设和校园创客活动的基本情况，在此基础上形成研究报告。围绕“如何建设校园创客空间”和“如何开展校园创客活动”等问题，精选国内案例，帮助基层教育工作者有序地开展创客教育。 . 创客教育能够坚持多久？我们不敢轻易预言，只能用十年来作为一个节点，一步一步地完成目标。最早的十年目标，是我在2015年的一次全国会议上提出，算起来差不多过了一半时间。虽然当时担心的一些情况也有发生，但总体上创客教育的发展情况良好。全国各地相继出台了实施或者推进创客教育的政策，创客空间如雨后春笋般建立，开源硬件写入了高中信息技术课程标准，“创意物化”成为中小学综合实践活动课程的重要目标，国产开源硬件项目“虚谷计划”启动并得到广泛支持。 . 创客教育何以持续十年？因为有老梁在内的很多教育创客的坚持。他们之中有教育管理部门的领导，也有高校的知名专家，有些在幕前摇旗呐喊，有些在幕后默默支持。没有他们的共同努力，就不会有创客教育的今天。 . 如果有人问老梁，这些年的最大感受是什么？我想老梁会回答：虽然很累，但痛并快乐着。如果有人问我，这些年的最大收获是什么？我会回答：大家都还在呢，一群人会走得很远。 . . 购买链接：https://item.jd.com/67911009902.html .",
            "url": "/myblog/2020/04/14/%E4%B8%BA%E6%A2%81%E6%A3%AE%E5%B1%B1%E6%96%B0%E4%B9%A6%E5%86%99%E7%9A%84%E5%BA%8F.html",
            "relUrl": "/2020/04/14/%E4%B8%BA%E6%A2%81%E6%A3%AE%E5%B1%B1%E6%96%B0%E4%B9%A6%E5%86%99%E7%9A%84%E5%BA%8F.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages汉化版使用说明",
            "content": "1 登录自己的github账户，访问：https://github.com/EasonQYS/fastpagesJupyter ，找到下面这个蓝色的字并点击， . . 在自己的账户下生成一个仓库（仓库名不能使用），用于运行网页。 . 2 稍等片刻（约30秒），你的github邮箱会收到一封邮件，指导你接下来的步骤。由于邮件是英文版，请参考README文档。 . 操作过程截图： . . . . 点击Add key后需要输入github密码。 . 3查看Actions，绿色对勾表示初始化完成。（这一步没有意义） . . 4在https://github.com/EasonQYS/fastpagesJupyter/settings settings页面下滑找到 . . 选择master branch，等待https://github.com/EasonQYS/fastpagesJupyter/actions 显示成功。 . 5如果运行正常，会生成一个新的branch，名为gh-pages。需要将网页改至该路径。（若干没有，可以先进行后续操作。稍后在回来做这一步） . . 至此，网站已经可以显示了。 . 6 修改_config.yml . 为了让页面显示更美观，以及修改超链接为正确内容，我们可能要做一下修改。 . 需要修改的部分均已给出中文标注。 . 相关修改参考见截图 . . 若要修改网页标题，则修改 . . 若要修改网页内容，则修改index.html文件。 . 现在网页正常显示了。 . 7 如果没有做第5步，现在做。做完后网站正常显示。 . . 8 上传Jupyter文件 . 所有ipynb文件都在_notebooks目录下，其中的readme要求命名格式为YYYY-MM-DD-*.ipynb，注意，很容易忘记最后一个破折号。 . 但是也有要求，第一个单元格内要以Markdown形式写： . . . 写完上传至_notebooks目录。如果是本地克隆文件夹，那么记得同步至github云端。 . 上传之后等待一段时间，即可在博客上看到这篇文章。 . 9 类似的，Markdown文件在_posts目录下，也能自动转换。 . 同样，有格式要求。（支持中文名） . 当然，少一点也行，这是一个例子： . 在_posts目录下创建正确命名的md文档，写入后保存。若在本地写好，记得同步（克隆）至云端。 . -– . layout: post . title: “Welcome to Jekyll!” . -– . # Welcome . **Hello world**, this is my first Jekyll blog post. . I hope you like it! . 10 此外，_docs还能转换docx文件，方法类似。 . 将文档上传至/_docs目录下即可。 . 11 删帖，删除上述文件即可。 . 遇到的坑： . 1、md文档可以转博客，但是rst文档好像不行。解决方案，将rst文件重命名时后缀改为md。 . 2、若上传多个文档，其中一个报错，同批所有文档都不显示。故每次上传一个文档为佳，利于排查。每个文档生成网页的时间大约在2分钟左右。需要等待至Action成绿色√才表示完成，可以查看网页。 . . 3、可加载网页图片，但不能加载本地图片（文档中自带的图片）。例如下图方式添加的图片不能显示。 . .",
            "url": "/myblog/2020/04/14/fastpages%E6%B1%89%E5%8C%96%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html",
            "relUrl": "/2020/04/14/fastpages%E6%B1%89%E5%8C%96%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "欢迎（ms Word）",
            "content": "欢迎你 . 欢迎你 . 欢迎你 . 欢迎你 . .",
            "url": "/myblog/2020/04/13/%E6%AC%A2%E8%BF%8E-MS-Word.html",
            "relUrl": "/2020/04/13/%E6%AC%A2%E8%BF%8E-MS-Word.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "欢迎使用Jekyll!（Markdown）",
            "content": "Jekyll博客将从这里开始. . 希望你喜欢! .",
            "url": "/myblog/2020/04/12/%E4%BD%A0%E5%A5%BD.html",
            "relUrl": "/2020/04/12/%E4%BD%A0%E5%A5%BD.html",
            "date": " • Apr 12, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "虚谷号jupyter入门教程",
            "content": "虚谷号Jupyter入门教程 . 1.1 什么是Jupyter . Jupyter的全称为Jupyter Notebook（此前被称为IPython notebook），是一个交互式笔记本，支持运行40多种编程语言。通过Jupyter，可以通过Web页面在虚谷号上运行Python代码和Linux命令。虚谷号的无线模式主要采用Jupyter来实现。 . Jupyter的本质是一个Web应用程序，便于创建和共享程序文档，支持实时代码，数学方程，可视化和Markdown。很多人喜欢直接在Jupyter上写代码，并同步记录学习心得，这样的学习笔记实际上就是一个很好的教程。 . 1.2 Jupyter快速入 . 1）访问Jupyter . 看到了这个文件，相信你已经打开了虚谷号的Jupyter。请使用谷歌浏览器（或者使用谷歌浏览器内核的浏览器）访问Jupyter。虚谷号的Wi-Fi有记忆功能，一般来说IP地址是不会变化的。当Wi-Fi信息设置好后，只要提供电源和Wi-Fi信号，就能使用Jupyter来访问虚谷号。 . 2）浏览Jupyter笔记 . 虚谷号上提供了很多学习笔记，默认放在“vvBoardbook”文件夹中。通过浏览这些学习笔记，可以快速掌握Python代码，了解虚谷号的基本功能。 . . 这些学习笔记中，有文字、图片还有Python代码。笔记中的代码可以即时编辑，还可以在线执行，并且能够返回运行结果。 . 用鼠标选中代码输入框（jupyter中称为“单元格”），单元格出现蓝色或者绿色边框，表示被选中。在菜单中选择“执行”命令，单元格的下方将出现单元格代码执行效果。执行完毕后，“in [ ]”中的括号将出现一个数字，表示单元格代码运行的次序。 . . 1.3 Jupyter可以做什么 . 1）学习Python编程 . Jupyter被誉为最好用的Python IDE之一，用来调试Python事半功倍。还可以在网页上显示虚谷号的传感器数值、摄像头内容等等。其实Jupyter不仅仅支持Python，还支持多种语言，这需要另外安装插件。 . 通过“新建”-“Python3”，即可新建一个笔记。 . 2）运行Linux命令 . 通过“新建”-“终端”，即可打开Web界面的终端。 . . 在仿真的终端页面，Jupyter几乎支持所有的命令，如安装软件、安装Python库文件、运行Python程序等。当关闭窗口后，再次打开，还能够看到之前的命令运行状态。 . 通过终端页面，还能够看到一共有几个命令窗口在运行。在不同电脑登陆Jupyter，可以共享这一界面，尤其适用于教学。 . 3）管理虚谷号 . Jupyter支持文件的上传和下载，新建文件、文件夹，删除、改名等操作，可以用来管理虚谷号的文件资源，可以安装各种库、软件等等。 . 1.4 Jupyter的代码调试技巧 . 1）如何快速运行指定的代码？ . Jupyter单元格中的代码，可以按照任意次序进行执行。Jupyter提供了多种执行代码的方式，在“单元格”菜单中。分为：运行所有单元格、运行所有、运行上面的代码块、运行下面的代码块等。 . 在调试代码的过程中，稍微复杂些的代码，往往需要全部重启，好查看程序的整体效果。如在测试GPIO的代码时，之前的代码对后面的代码会产生影响，这就需要重启服务。具体的功能在“服务”菜单中。可以选择“重启 &amp; 清空输入”、“重启 &amp; 运行所有” . 2.为什么打开笔记的时候，所有的代码都已经运行了？ . Jupyter笔记会保留代码运行的状态，打开一个笔记往往会看到很多的输出信息。如何让这些信息消失，保持代码的未运行状态？那就需要在关闭笔记前，执行“重启 &amp; 清空输入”，然后保存退出。 . 3.为什么打开多个笔记后Iupyter的运行速度变慢？ . 打开Iupyter的笔记，关闭页面并不能结束程序运行，还会有线程在单独运行，占用虚谷号的内存。当打开较多的程序，直接使用关闭页面的方式来关闭笔记，可能会导致内存不够用而死机。创客版的内存比教育版小，感觉会比较明显。 . 避免这种情况最好方法便是彻底结束程序运行。结束程序的方法如下：1、运行完程序，需要结束则在程序的页面选择“服务”-“关闭”。2、关闭程序的页面，看到程序的目录刚运行的程序呈绿色，并且显示运行，勾选前面的小方框，在选择出现的黄色的关闭选项，即可结束程序的运行。3、点击Jupyter的“运行”，会看到当前在运行的终端和笔记，逐个关闭即可。 . 1.5 如何用Jupyter写笔记 . Jupyter的笔记中既可以插入代码，也可以用MarkDown语法排版的文字。 . MarkDown教程：https://baike.baidu.com/item/markdown/3245829?fr=aladdin . Jupyter支持用“CTRL+C”的形式插入图片。 . 1.6 关于Jupyter的常见问题 . 1）除了虚谷号内置的笔记，还有其他的笔记吗？ . 虚谷号团队在不断编写学习笔记，除此之外，在网上能够找到很多jupyter学习笔记（扩展名为ipynb），如jupyter的官方网站。（https://nbviewer.jupyter.org/）。 . 2）可以多人一起使用Jupyter吗？ . 可以。甚至可以多人共同编辑一个笔记。。 . 3）Jupyter的笔记能不能导出来？ . 当然可以，Jupyter的笔记能够导出很多种格式，如py、pdf、html等等。 . 4）在Jupyter上，如何做交互，比如输入字符之类。 . 不仅可以直接在网页上输入，还能够利用Jupyter的网页小控件，做文本框、选择框等。图片也可以直接显示在网页上。 .",
            "url": "/myblog/2020/04/10/%E8%99%9A%E8%B0%B7%E5%8F%B7Jupyter%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html",
            "relUrl": "/2020/04/10/%E8%99%9A%E8%B0%B7%E5%8F%B7Jupyter%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
            "content": "What Superpowers? . Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool. . Recently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential: . fastpages . fastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below: . Machine Learning Ops . Wouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions! . Consider the below annotated screenshot of this Pull Request: . . A more in-depth explanation about the above project can be viewed in this video: . Using GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says: . GitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1 . Additionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below. . A Gentle Introduction To GitHub Actions . What Are GitHub Actions? . GitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as: . Opening a pull request | Making an issue comment | Labeling an issue | Creating a new branch | … and many more | . When an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created: . { &quot;action&quot;: &quot;created&quot;, &quot;issue&quot;: { &quot;id&quot;: 444500041, &quot;number&quot;: 1, &quot;title&quot;: &quot;Spelling error in the README file&quot;, &quot;user&quot;: { &quot;login&quot;: &quot;Codertocat&quot;, &quot;type&quot;: &quot;User&quot;, }, &quot;labels&quot;: [ { &quot;id&quot;: 1362934389, &quot;node_id&quot;: &quot;MDU6TGFiZWwxMzYyOTM0Mzg5&quot;, &quot;name&quot;: &quot;bug&quot;, } ], &quot;body&quot;: &quot;It looks like you accidently spelled &#39;commit&#39; with two &#39;t&#39;s.&quot; } . This functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi: . The Usage section describes how this Action can be used: . - name: Publish a Python distribution to PyPI uses: pypa/gh-action-pypi-publish@master with: user: __token__ password: ${{ secrets.pypi_password }} . This Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are: . actions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers. | mxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this. | actions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list). | . In addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in. . Example: A fastpages Action Workflow . The best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post). . Part 1: Define Workflow Triggers . blog, defined in ci.yaml. Like all Actions workflows, this is YAML file is located in the .github/workflows directory of the GitHub repo. . The top of this YAML file looks like this: . name: CI on: push: branches: - master pull_request: . This means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file. . Part 2: Define Jobs . Next, we define jobs (there is only one in this workflow). Per the docs: . A workflow run is made up of one or more jobs. Jobs run in parallel by default. . jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 runs-on: ubuntu-latest steps: . The keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML: . - name: see payload run: | echo &quot;PAYLOAD: n${PAYLOAD} n&quot; env: PAYLOAD: ${{ toJSON(github.event) }} . Note: the above step is only for debugging and is not currently in the workflow. . toJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity): . { &quot;ref&quot;: &quot;refs/tags/simple-tag&quot;, &quot;before&quot;: &quot;6113728f27ae8c7b1a77c8d03f9ed6e0adf246&quot;, &quot;created&quot;: false, &quot;deleted&quot;: true, &quot;forced&quot;: false, &quot;base_ref&quot;: null, &quot;commits&quot;: [ { &quot;message&quot;: &quot;updated README.md&quot;, &quot;author&quot;: &quot;hamelsmu&quot; }, ], &quot;head_commit&quot;: null, } . Therefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which: . [is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run. . Therefore, the if statement introduced above: . if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 . Allows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator). . Finally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in. . Part 3: Define Steps . Per the docs: . A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. . Below are the first two steps in our workflow: . - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: convert notebooks and word docs to posts uses: ./_action_files . The first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax: . uses: ./_action_files . is a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial. . The next three steps in our workflow are defined below: . - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: Jekyll build uses: docker://hamelsmu/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;&amp; jekyll build -V&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&gt;/dev/null || : . The step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps. . The step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called hamelsmu/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container. . The final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article. . The final step in our workflow is defined below: . - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.SSH_DEPLOY_KEY }} publish_dir: ./_site . The statement . if: github.event_name == &#39;push&#39; . uses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur. . This step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action. . Conclusion . We hope that this has shed some light on how we use GitHub Actions to automate fastpages. While we only covered one workflow above, we hope this provides enough intuition to understand the other workflows in fastpages. We have only scratched the surface of GitHub Actions in this blog post, but we provide other materials below for those who want to dive in deeper. We have not covered how to host an Action for other people, but you can start with these docs to learn more. . Still confused about how GitHub Actions could be used for Data Science? Here are some ideas of things you can build: . Jupyter Widgets that trigger GitHub Actions to perform various tasks on GitHub via the repository dispatch event | Integration with Pachyderm for data versioning. | Integration with your favorite cloud machine learning services, such Sagemaker, Azure ML or GCP’s AI Platform. | . Related Materials . GitHub Actions official documentation | Hello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use. | Awesome Actions: A curated list of interesting GitHub Actions by topic. | A tutorial on Docker for Data Scientists. | . Getting In Touch . Please feel free to get in touch with us on Twitter: . Hamel Husain @HamelHusain | Jeremy Howard @jeremyphoward | . . Footnotes . You can see some of Hugging Face’s Actions workflows for machine learning on GitHub &#8617; . | These additional dependencies are defined here, which uses the “jekyll build” command to add ruby dedpendencies from the Gemfile located at the root of the repo. Additionally, this docker image is built by another Action workflow defined here. &#8617; . |",
            "url": "/myblog/actions/markdown/2020/03/06/fastpages-actions.html",
            "relUrl": "/actions/markdown/2020/03/06/fastpages-actions.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "/myblog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Footnotes . This is the footnote. &#8617; . |",
            "url": "/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "/myblog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "关于我",
          "content": "这是 About（关于） 页面。 像其他页面一样, 这是用Markdown格式书写的。 . 此网站由 fastpages 1提供技术支持。 . 此网站由 EasonQYS 2提供汉化支持。 . 一个除了普通格式外还支持Jupyter的博客。 &#8617; . | 第一个中文汉化版本。 &#8617; . |",
          "url": "/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/myblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}